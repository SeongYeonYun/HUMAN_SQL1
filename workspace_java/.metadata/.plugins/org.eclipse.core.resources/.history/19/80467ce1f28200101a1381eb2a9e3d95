package Filter;

import java.io.IOException;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.annotation.WebFilter;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

/**
 * Servlet Filter implementation class CheckFilter
 */
@WebFilter("/*") //이 프로젝트를 포함한 모든 경로
public class CheckFilter implements Filter {

    /**
     * Default constructor. 
     */
	

    public CheckFilter() {
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see Filter#destroy()
	 */
	public void destroy() {
		// TODO Auto-generated method stub
	}

	/**
	 * @see Filter#doFilter(ServletRequest, ServletResponse, FilterChain)
	 */
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
		// TODO Auto-generated method stub
		// place your code here
		// pass the request along the filter chain
		
		request.setCharacterEncoding("utf-8");

		//		html으로만 응답하기 떄문에 json같은 것은 json으로 응답해야 한다 .
//		response.setContentType("text/html;charset=utf-8")
		
		//서블릿 실행 전에 시계를 본다.
		long before = System.currentTimeMillis();
		
		
//		데이지 체인 : 건너건너 넘어가는 형식,
//		그렇게 넘어 가는 과정중 중간에 필터가 막는데 그 역할을 하는게 do filter	
		// do filer를 기준으로 전과 후가 나뉨, 이런것들을 AOP라고 부른다.
		//실제 사용자가 원하던 일
		
		System.out.println("do filter 실행 전");
//		request.getServletpath;
		
		// instance of, 
		HttpServletRequest req = (HttpServletRequest)request;
		HttpServletResponse resp = (HttpServletResponse)response;
		
		String path = req.getServletPath();
		System.out.println("path: " + path);
		
		//로그인 없이 갈수 있는곳, 세션없이 접근 허용
		if(path.equals("login.html")
				|| path.startsWith("/assets")) { //assets을 포함하는 문자열인지 아닌지
			chain.doFilter(request, response);
		} else {
			
			//로그인 필수
//			HttpSession session = req.getSession(false); //세션의 고착화 방지
//			if(session == null) {
//				//로그인 페이지로 보내디
//			}
			HttpSession session = req.getSession();
			String login = (String)session.getAttribute("login");
			if("Y".equals(login)) {
				chain.doFilter(request, response);
			} else {
				resp.sendRedirect(req.getContextPath() + "/login.html"); 
				//절대 주소로 할것 getContextPath로 앞의 경로로 불러옴 
				
			}
			
			
		}
		
		
		chain.doFilter(request, response);
		System.out.println("do filter 실행 후");
		
		
		
		//서블릿 실행 후에 시계를 본다.
		long after = System.currentTimeMillis();
		
		System.out.println("걸린시간 : " + (after - before));
	}

	/**
	 * @see Filter#init(FilterConfig)
	 */
	public void init(FilterConfig fConfig) throws ServletException {
		// TODO Auto-generated method stub
	}
	
	
	
	
	//복습 필요!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	private boolean isExclude(String path) {
		boolean result = false;
		if(path.equals("login.html")
				|| path.startsWith("/assets")) {//assets을 포함하는 문자열인지 아닌지
			result = true;
			return true;
			
		} else {
			return false;
			//로그인 필수
		}
	}

}
