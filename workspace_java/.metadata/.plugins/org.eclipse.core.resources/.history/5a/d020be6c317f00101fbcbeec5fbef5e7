package cookie;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;

@WebServlet("/rollback")
public class Rollbacktest extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {

        resp.setContentType("text/plain; charset=UTF-8");
        PrintWriter out = resp.getWriter();

        Connection conn = null;
        PreparedStatement pstmt = null;

        try {
            // H2 메모리 DB 연결 (테스트용, 다른 DB 쓰셔도 됩니다)
            Class.forName("org.h2.Driver");
            conn = DriverManager.getConnection("jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1", "sa", "");

            // 자동 커밋 해제
            conn.setAutoCommit(false);

            // 테이블 없으면 생성
            conn.createStatement().execute(
                "CREATE TABLE IF NOT EXISTS test_entity (" +
                "id INT AUTO_INCREMENT PRIMARY KEY, " +
                "name VARCHAR(255))");

            // INSERT 실행
            pstmt = conn.prepareStatement("INSERT INTO test_entity(name) VALUES (?)");
            pstmt.setString(1, "rollback-test");
            pstmt.executeUpdate();

            // 강제로 예외 발생 → rollback 유도
            if (true) {
                throw new RuntimeException("의도적으로 발생시킨 예외!");
            }

            conn.commit(); // 여기까지 오면 commit
            out.println("정상 처리됨 (commit)");

        } catch (Exception e) {
            try {
                if (conn != null) {
                    conn.rollback(); // 롤백 수행
                    System.out.println("[트랜잭션] 롤백 발생: " + e.getMessage());
                    out.println("에러 발생 → 롤백됨: " + e.getMessage());
                }
            } catch (Exception rollbackEx) {
                rollbackEx.printStackTrace();
            }
        } finally {
            try { if (pstmt != null) pstmt.close(); } catch (Exception ignore) {}
            try { if (conn != null) conn.close(); } catch (Exception ignore) {}
        }
    }
}
