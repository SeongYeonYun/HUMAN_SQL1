테이블 table, 표

한 줄 . 행. row, record. 튜플
한 칸, 필드 , 속성attribute, 변수 , column

기본키 , 주요키, 중요키, primary key

외래키 . foreign key


---------git-------------
git init : 저장소 생성,repo
	push : 코드를 깃(원격 저장소)에 저장
	pull : 깃에 저장된 코드를 불러옴, 깃에 저장된 파일을 다운로드
	commit : 푸쉬 전단계, 스테이징된 파일을 지정(수정 내용에 대한 메세지 적는걸 습관화)
	add : 파일을 staging로 변경한다. 변경된 파일을 커밋 대상으로 지정하는 일을 한다.
	patch : 원격 저장소의 정보로 업데이트 한다. 업데이트 상황 확인
	clone : 원격 저장소의 모든 내용을 내 저장소로 다운로드
	branch : push가 따로 관리되는 복사본
	checkout : branch변경 하는 명령어, (clon은 아예 다운을 받는거고, checkout는 브랜치만 이동시키는것)
	fork : 복사한 브랜치에 push가 즉각 반영되지 않는 브랜치
	pull request : fork의 내용을 승인 요청 -> 관리자가 승인 한후에 push를 내용 저장소에 반영
	merge : 합병. 브랜치 병합
	conflict : 충돌, push 불가 -> 충돌을 피한는 방법(일단 내꺼 지워 -> push -> 내꺼 살려 -> 푸쉬)
	reset : add명령어로 스테이징 한 파일들을 다시 원래 상태로 되돌리는 과정
	
BIT : 0 또는 1
BYTE : 8BIT (2^8종류의 데이터를 가질수 있다)
KBYTE : 1024 BYTE
MBYTE : 1024 *
GBYTE : 1024 *
TBYTE : 1024 *	

https://school.programmers.co.kr/learn/courses/30/lessons/59413



/*
개발직
-> SI : 시스템 통합, 신규개발, mes, erp
-> sm : 유지 보수
-> 솔루션 : si+ sm 자회사 제품을 다룸

--------------------------------------------
-> 프론트앤드 : 웹, 홈페이지, 웹 에이전시, DBA(DB를 중심으로, SQL + 튜닝)
-> 백엔드 : 전력 관제, 

운영 : QE,QA,QC 
엔지니어 : 개발보다는 운영을 수월하게

*/

-----------------------------------------------------------------
/*
char(길이) : 최대 2000바이트 고정길이
varchar2(길이) : 최대길이 4000바이트, 길이가 변경됨

number(전체길이, 소수점 길이) : 숫자만 넣을수 있음, 
	number(7,2) : 전체 7자리 , 소수점 이하 2자리
	
date : 날자형식

blob : 이미지 저장된
clob : 글씨를 저장된
json : 데이터 파일을 최대 23mb 크리고 저장할수 있다.



*/
		
schema : 데이터의 관계와 데이터 구조, 
		 제약조건 등 데이털르 저장하고 관리하고자 정의한 데이터베이스 구조 범위 
	
